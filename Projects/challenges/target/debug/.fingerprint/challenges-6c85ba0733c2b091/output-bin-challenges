{"message":"usage of `contains_key` followed by `insert` on a `HashMap`","code":{"code":"clippy::map_entry","explanation":null},"level":"warning","spans":[{"file_name":"src\\challenge_2.rs","byte_start":1918,"byte_end":2104,"line_start":59,"line_end":63,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if word_map.contains_key(&word_value) {","highlight_start":9,"highlight_end":48},{"text":"            word_map.get_mut(&word_value).unwrap().push(word);","highlight_start":1,"highlight_end":63},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            word_map.insert(word_value, vec![word]);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::map_entry)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_entry","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src\\challenge_2.rs","byte_start":1918,"byte_end":2104,"line_start":59,"line_end":63,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if word_map.contains_key(&word_value) {","highlight_start":9,"highlight_end":48},{"text":"            word_map.get_mut(&word_value).unwrap().push(word);","highlight_start":1,"highlight_end":63},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            word_map.insert(word_value, vec![word]);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if let std::collections::hash_map::Entry::Vacant(e) = word_map.entry(word_value) {\n            e.insert(vec![word]);\n        } else {\n            word_map.get_mut(&word_value).unwrap().push(word);\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: usage of `contains_key` followed by `insert` on a `HashMap`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\challenge_2.rs:59:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if word_map.contains_key(&word_value) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            word_map.get_mut(&word_value).unwrap().push(word);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            word_map.insert(word_value, vec![word]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::map_entry)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif let std::collections::hash_map::Entry::Vacant(e) = word_map.entry(word_value) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             e.insert(vec![word]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             word_map.get_mut(&word_value).unwrap().push(word);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"unneeded late initialization","code":{"code":"clippy::needless_late_init","explanation":null},"level":"warning","spans":[{"file_name":"src\\challenge_4.rs","byte_start":409,"byte_end":442,"line_start":12,"line_end":12,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    let most_common_sum: Vec<String>;","highlight_start":5,"highlight_end":38}],"label":"created here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\challenge_4.rs","byte_start":506,"byte_end":706,"line_start":15,"line_end":20,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    most_common_sum = cached_words","highlight_start":5,"highlight_end":35},{"text":"        // get HashMap keys","highlight_start":1,"highlight_end":28},{"text":"        .into_values()","highlight_start":1,"highlight_end":23},{"text":"        // get the length of every group of words","highlight_start":1,"highlight_end":50},{"text":"        .max_by(|x, y| x.len().cmp(&y.len()))","highlight_start":1,"highlight_end":46},{"text":"        .unwrap();","highlight_start":1,"highlight_end":18}],"label":"initialised here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_late_init)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove the local","code":null,"level":"help","spans":[{"file_name":"src\\challenge_4.rs","byte_start":409,"byte_end":442,"line_start":12,"line_end":12,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    let most_common_sum: Vec<String>;","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"declare `most_common_sum` here","code":null,"level":"help","spans":[{"file_name":"src\\challenge_4.rs","byte_start":506,"byte_end":521,"line_start":15,"line_end":15,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    most_common_sum = cached_words","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":"let most_common_sum: Vec<String>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unneeded late initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\challenge_4.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let most_common_sum: Vec<String>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mcreated here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    most_common_sum = cached_words\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // get HashMap keys\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .into_values()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // get the length of every group of words\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .max_by(|x, y| x.len().cmp(&y.len()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|_________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11minitialised here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_late_init)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: declare `most_common_sum` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mlet most_common_sum: Vec<String>\u001b[0m\u001b[0m = cached_words\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"the variable `index` is used as a loop counter","code":{"code":"clippy::explicit_counter_loop","explanation":null},"level":"warning","spans":[{"file_name":"src\\challenge_6.rs","byte_start":825,"byte_end":857,"line_start":22,"line_end":22,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    for word_group in precached_list {","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\challenge_6.rs","byte_start":825,"byte_end":1749,"line_start":22,"line_end":50,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    for word_group in precached_list {","highlight_start":5,"highlight_end":39},{"text":"        // store a temporal word to compare","highlight_start":1,"highlight_end":44},{"text":"        println!(\"------\");","highlight_start":1,"highlight_end":28},{"text":"        let tmp = word_group","highlight_start":1,"highlight_end":29},{"text":"            .1","highlight_start":1,"highlight_end":15},{"text":"            .get(index)","highlight_start":1,"highlight_end":24},{"text":"            .unwrap_or(&\"verdammt\".to_string())","highlight_start":1,"highlight_end":48},{"text":"            .to_owned();","highlight_start":1,"highlight_end":25},{"text":"        println!(\"{}\", tmp);","highlight_start":1,"highlight_end":29},{"text":"        println!(\"------\");","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // iter over each group of word","highlight_start":1,"highlight_end":40},{"text":"        for word in word_group.1.clone() {","highlight_start":1,"highlight_end":43},{"text":"            println!(\"+++...\");","highlight_start":1,"highlight_end":32},{"text":"            println!(\"{}\", word);","highlight_start":1,"highlight_end":34},{"text":"            println!(\"...+++\");","highlight_start":1,"highlight_end":32},{"text":"            // when we found two words that satisfies all the conditions","highlight_start":1,"highlight_end":73},{"text":"            // we break both loops (the first by using a flag)","highlight_start":1,"highlight_end":63},{"text":"            if !letters_in_common(tmp.clone(), word.clone()) {","highlight_start":1,"highlight_end":63},{"text":"                result.insert(word_group.0, vec![tmp, word]);","highlight_start":1,"highlight_end":62},{"text":"                flag = true;","highlight_start":1,"highlight_end":29},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        index += 1;","highlight_start":1,"highlight_end":20},{"text":"        if flag {","highlight_start":1,"highlight_end":18},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src\\main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(clippy::explicit_counter_loop)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"src\\challenge_6.rs","byte_start":825,"byte_end":857,"line_start":22,"line_end":22,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    for word_group in precached_list {","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":"for (index, word_group) in precached_list.into_iter().enumerate()","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\challenge_6.rs","byte_start":825,"byte_end":1749,"line_start":22,"line_end":50,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    for word_group in precached_list {","highlight_start":5,"highlight_end":39},{"text":"        // store a temporal word to compare","highlight_start":1,"highlight_end":44},{"text":"        println!(\"------\");","highlight_start":1,"highlight_end":28},{"text":"        let tmp = word_group","highlight_start":1,"highlight_end":29},{"text":"            .1","highlight_start":1,"highlight_end":15},{"text":"            .get(index)","highlight_start":1,"highlight_end":24},{"text":"            .unwrap_or(&\"verdammt\".to_string())","highlight_start":1,"highlight_end":48},{"text":"            .to_owned();","highlight_start":1,"highlight_end":25},{"text":"        println!(\"{}\", tmp);","highlight_start":1,"highlight_end":29},{"text":"        println!(\"------\");","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // iter over each group of word","highlight_start":1,"highlight_end":40},{"text":"        for word in word_group.1.clone() {","highlight_start":1,"highlight_end":43},{"text":"            println!(\"+++...\");","highlight_start":1,"highlight_end":32},{"text":"            println!(\"{}\", word);","highlight_start":1,"highlight_end":34},{"text":"            println!(\"...+++\");","highlight_start":1,"highlight_end":32},{"text":"            // when we found two words that satisfies all the conditions","highlight_start":1,"highlight_end":73},{"text":"            // we break both loops (the first by using a flag)","highlight_start":1,"highlight_end":63},{"text":"            if !letters_in_common(tmp.clone(), word.clone()) {","highlight_start":1,"highlight_end":63},{"text":"                result.insert(word_group.0, vec![tmp, word]);","highlight_start":1,"highlight_end":62},{"text":"                flag = true;","highlight_start":1,"highlight_end":29},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        index += 1;","highlight_start":1,"highlight_end":20},{"text":"        if flag {","highlight_start":1,"highlight_end":18},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src\\main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the variable `index` is used as a loop counter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\challenge_6.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for word_group in precached_list {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: consider using: `for (index, word_group) in precached_list.into_iter().enumerate()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::explicit_counter_loop)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\u001b[0m\n\n"}
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 3 warnings emitted\u001b[0m\n\n"}
